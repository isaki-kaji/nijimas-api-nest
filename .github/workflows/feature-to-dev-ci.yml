name: Feature-To-Dev-CI

on:
  pull_request:
    branches:
      - dev
    paths: ['src/**/*.ts', 'test/**/*.ts', 'tsconfig.json']
  push:
    branches:
      - dev
    paths: ['src/**/*.ts', 'test/**/*.ts', 'tsconfig.json']
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test
      - run: npm run test:cov

  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      ENV_FILE: .env.test
      DATASOURCE_PORT: ${{ vars.DATASOURCE_PORT }}
      DATASOURCE_DATABASE: ${{ vars.DATASOURCE_DATABASE }}
      DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
      DATASOURCE_HOST: ${{ vars.DATASOURCE_HOST }}
      DATASOURCE_URL: ${{ vars.DATASOURCE_URL }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: 'npm'

      - run: |
          {
            echo "ENV_FILE=${ENV_FILE}"
            echo "DATASOURCE_PORT=${DATASOURCE_PORT}"
            echo "DATASOURCE_DATABASE=${DATASOURCE_DATABASE}"
            echo "DATASOURCE_USERNAME=${DATASOURCE_USERNAME}"
            echo "DATASOURCE_PASSWORD=${DATASOURCE_PASSWORD}"
            echo "DATASOURCE_HOST=${DATASOURCE_HOST}"
            echo "DATASOURCE_URL=${DATASOURCE_URL}"
          } >> .env.test

      - run: npm ci
      - run: npm run build --if-present
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - run: docker-compose --env-file .env.test -f ./deploy/docker-compose/docker-compose.test.yml up -d
      - run: npm run pretest:e2e && npm run test:e2e
      - if: always()
        run: npm run posttest:e2e
